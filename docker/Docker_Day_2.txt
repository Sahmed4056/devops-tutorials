Docker volumes
==================
Normally the data inside the docker container will be deleted automatically if container stopped/killed.
Inorder to make the data present inside the container available after that container stopped/killed we use docker volumes.


Create a container & login
docker run -it ubuntu /bin/bash
echo "Testing the data storage availability" > /storage.out
cat /storage.out

Suppose if we kill/exited container the /storage.out file also deleted, but in realtime there will be a situations
we need to have file/data present inside the container.

exit the container & we will not able to see the /storage.out file.

So docker volumes will help

There are different using docker volumes
1. Anonymous volumes
2. Named volumes
3. host based volumes


----------------------
1. Anonymous volumes
----------------------
Create a container a with mount point /data_01 & the data/files present under /data_01 will be accessible on docker host if container destroyed.
docker run -it --name myubutnu -v /data_01 ubuntu:latest

To know more details about docker containers we use inspect command,
docker inspect mybuntu

The output of the docker inspect command is in json format.
Here in mount section we find the source tag which present on docker host machine & pointing to the /data_01 of docker host.

So Inside the docker container under /data_01 if we create any file that will shown in docker host /var/lib/dcpler/volumes/8491375021/_data

And same if we create any files/directory inside docker host machine will be showed in container as well.

Now kill the container & check whether the data of container is present on docker host or not.

With this method we will get confused to which volume the container was used if we there many containers.

------------------
2. Named volumes
------------------
a. During named volumes we provide name for the docker volume on host machine
	docker run -it --name myubutnu -v volume_test:/data_01 ubuntu:latest

b. To know more details about docker containers we use inspect command,
	docker inspect mybuntu

	The output of the docker inspect command is in json format.
	Here in mount section we find the source tag which present on docker host machine & pointing to the /data_01 of docker host.
	We can observe volume name generated as volume_test

So Inside the docker container under /data_01 if we create any file that will shown in docker host /var/lib/dcpler/volumes/8491375021/_data

And same if we create any files/directory inside docker host machine will be showed in container as well.

Now kill the container & check whether the data of container is present on docker host or not.

With this method we will get confused to which volume the container was used if we there many containers

--------------------------
3. host based volumes
--------------------------
In this method we will mount specific directory on docker host machine to docker container.

a. Create new directory on host machine
	mkdir /root/volume-test

b. Mount the new directory(/root/volume-test) as mountpoint(/data_01) inside the container
	docker run -it --name volume_test3 -v /root/volume-test:/data_01 ubuntu:latest

c. Create a file inside the docker container on /data_01
	mkdir IamInsideContainer

d. On new terminal check the directory "IamInsideContainer" present or not under "/root/volume-test"
	cd /root/volume-test
	ls

e. Create new directory on host under /root/volume-test
	cd /root/volume-test
	mkdir IamOutSideContainer

f. Verify inside docker container IamOutSideContainer folder present or not under /data_01
	cd /data_01
	ls

g. Stop & kill the container
	docker stop <container_id>
	docker rm <container_id>

h. Verify the files which are present under /data_01 directory of container are not lost.
	cd /root/volume-test
	ls


=============
Port Mapping
=============
Normally every application runs on a specific port.
Like
	tomcat will run on port 8080
	sonarqube will run on port 9000
Similary when we spin container for any application it will run particular port,
We can't directory connect to the docker conatiner via port directory, so we will bind docker container exposed port with host machine port.

	docker run -it --rm -p 8888:8080 tomcat