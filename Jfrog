==========================================================================================================================================================
								Day-1
==========================================================================================================================================================
1. What is artifact?
   a. Artifact is a binary file which is geneated as part of build execution on the source code.
   
   b. Let's assume you have java sourcecode & once build the source the binary file will be created. This binary file we call it as artifact.
		For java source code --> .jar/.war/.ear are artifacts
		For .Net source code --> .exe/.dll are artifacts

   c. We may not directly use these artifacts on top of OS, instead of that on the OS tomcat/websphere we will install it & deploy the .jar/.war/.ear files.


2. What is artifact repository?
	Artifact repository is the place to store artifacts which are generated as part of build process.
	Also artifactory repository will acts as cache repository for downloading the dependcy binaries.
	
	Example:
      In maven build tool when we do "mvn install" it will download the dependecies from the internet,
      instead of that we can download dependecies from Artifactory also, when there is situation of          having restrictions to internet for that build server.


3. Artifact repositories available in the market
	https://mindmajix.com/10-repository-management-devops-tools

4. How to install Jfrog artifactory?
	-------------
	Prerequisites
	-------------
	a. Create EC2 with instance type of t2.small
	b. Allow the ports 8081 & 8082

	------------------
	Installation steps
	------------------
	There two types of installables avaialble for Jfrog
	a. pro installer --> It's Licensed version
	b. oss installer --> It's a free open source solution
	
	c. Login to EC2 with root user & install java
		yum install java-1.8* -y
		
	d. Download the artifactory installers into /opt
		There two types of installables avaialble for Jfrog
			a. pro installer --> It's Licensed version
			b. oss installer --> It's a free open source solution
		Now let's install oss installer
		
		cd /opt
		wget -O https://releases.jfrog.io/artifactory/bintray-artifactory/org/artifactory/oss/jfrog-artifactory-oss/6.23.42/jfrog-artifactory-oss-6.23.42.zip
		
	e. Extract the archive
		unzip jfrog-artifactory-oss-6.23.42.zip
		mv jfrog-artifactory-oss-6.23.42 jfrog
	
	f. Set JFROG_HOME variable
		echo "export JFROG_HOME=/opt/jfrog" > /etc/profile.d/jfrog.sh
		source /etc/profile/jfrog.sh
		
	g. Run a startup script
		cd /opt/jfrog/app/bin/
		./artifactory.sh start
		
	h. Access the artifactory from browser
		http://<dnshostname>:8081
		
	i. Default credentials to login jfrog artifactory
		user: admin
		password: password
	
	j. Change the default password
	
	k. Choose a repository maven project, by default 5 repositories will gets created.
	
		libs-snapshot-local
		libs-release-local
		libs-snapshot
		libs-release
		jcenter

	l. Check Artifact repository browser & we don't see any artifacts on those repostories, those are empty.

5. In JFrog main we will have 3 types of repositories
	Local   --> Local repositories are the place to store artifacts generated as part of build
	Remote  --> This repository get in sync with central maven repository
	Virtual --> It's a combination of local + remote repositories

	In Local repositories we can see
		libs-snapshot-local
		libs-release-local
	
	In Remote repositories we can see
		jcenter
	
	In Virtual repositories we can see
		libs-snapshot
		libs-release

==================================================
6. How to integreate Jfrog Artifactory with maven
==================================================
Source code: https://github.com/yankils/hello-world.git
Tools: Maven & Jfrog

a. Publish the artifact into the jfrog snapshot repository
	A. Go Jfrog libs-snapshot-local repository & setup ==> Deploy
	B. Copy the <distributionManagement> XML code into pom.xml
	C. Run mvn deploy {Will tries to deploy artifact into libs-snapshot-local repository}
	D. Deply failed due to authorization issue
	E. Go setup of repository in Jfrog & generate settings.xml file
	F. Copy the settings.xml file into ~/.m2/ folder
	G. mvn deploy will deploy jar file along with pom.xml into Jfrog libs-snapshot-local repository
	H. Why snapshot pushed to libs-snapshot-local?
		due to verion tag contains 1.0-SNAPSHOT
	


b. Publish the artifact into jfrog releaes repository
	A. Remove -SNAPSHOT in pom.xml & run mvn deploy
	B. Copy the <distributionManagement> XML code of libs-release-local into pom.xml
	C. Artifact will be pushed into libs-release repo
	

c. Pull the depedencies from Jfrog artifactory rather than Central repo
	A. Rename the ~/.m2/setting.xml
		mv ~/.m2/setting.xml ~/.m2/setting.xml.bkp
	B. mvn clean install
		Artifacts will be downloaded from Central maven repo
	C. Rename the ~/.m2/setting.xml.bkp to settings.xml
		mv ~/.m2/setting.xml.bkp ~/.m2/setting.xml
	D. mvn clean install
		Artifacts will be downloaded from Jfrog repositories
		
==========================================================================================================================================================
								Day-2
==========================================================================================================================================================
1. How to integreate Jfrog Artifactory with Jenkins Maven project

	a. Install "Artifactory" plug-in
		Manage Jenkins -> Jenkins Plugins -> available -> artifactory
		Configure Artifactory server credentials

	b. Manage Jenkins -> Configure System -> Artifactory
		Artifactory Servers
		Server ID : Artifactory-Server
		URL : Artifactory Server URL
		Username : jenkins
		Password : jenkins@123

	c. Create a Maven Project
		Job Name : artifactory-project
		Source code management
		Git URL : https://github.com/chaitanyaredd/hello-world.git
		Build Environment
		Resolve artifacts from Artifactory : <provide Artifactory server and repository details>
		Build - Goals: clean install
		Post-build Actions
		Deploy Artifacts to Artifactory : <provide Artifactory server and repository details>
		Execute job
		

2. How to download Jfrog Artifact with Jenkins Freestyle project


3. How to Upload & resolve artifact from Jfrog
	pipeline {
	    agent any
	    stages {
		stage ('Clone') {
		    steps {
			git branch: 'master', url: "https://github.com/jfrog/project-examples.git"
		    }
		}

		stage ('Artifactory configuration') {
		    steps {
			rtServer (
			    id: "ARTIFACTORY_SERVER",
			    url: SERVER_URL,
			    credentialsId: CREDENTIALS
			)

			rtMavenDeployer (
			    id: "MAVEN_DEPLOYER",
			    serverId: "ARTIFACTORY_SERVER",
			    releaseRepo: ARTIFACTORY_LOCAL_RELEASE_REPO,
			    snapshotRepo: ARTIFACTORY_LOCAL_SNAPSHOT_REPO
			)

			rtMavenResolver (
			    id: "MAVEN_RESOLVER",
			    serverId: "ARTIFACTORY_SERVER",
			    releaseRepo: ARTIFACTORY_VIRTUAL_RELEASE_REPO,
			    snapshotRepo: ARTIFACTORY_VIRTUAL_SNAPSHOT_REPO
			)
		    }
		}

		stage ('Exec Maven') {
		    steps {
			rtMavenRun (
			    tool: MAVEN_TOOL, // Tool name from Jenkins configuration
			    pom: 'maven-examples/maven-example/pom.xml',
			    goals: 'clean install',
			    deployerId: "MAVEN_DEPLOYER",
			    resolverId: "MAVEN_RESOLVER"
			)
		    }
		}

		stage ('Publish build info') {
		    steps {
			rtPublishBuildInfo (
			    serverId: "ARTIFACTORY_SERVER"
			)
		    }
		}
	    }
	}
	

=================
Practice-session
=================
4. How to Upload & download specific artifact into particular repo in Unique way
	a. Move the artifact created as part of onlinebookstore.war into target repo like onlinebookstore/${JOB_NAME}/${BUILD_TIMESTAMP}/onlinebookstore.war
	b. Download the latest artifact from target repo like onlinebookstore/${JOB_NAME}/${BUILD_TIMESTAMP}/onlinebookstore.war
	
	pipeline {
	    agent any

	    stages {
		stage ('Clone') {
		    steps {
			git branch: 'master', url: "https://github.com/jfrog/project-examples.git"
		    }
		}

		stage ('Upload') {
		    steps {
			rtUpload (
			    // Obtain an Artifactory server instance, defined in Jenkins --> Manage Jenkins --> Configure System:
			    serverId: SERVER_ID,
			    spec: """{
				    "files": [
					    {
						"pattern": "jenkins-examples/pipeline-examples/resources/ArtifactoryPipelineNoProps.zip",
						"target": "libs-snapshot-local/jfrog-examples/${BUILD_TIMESTAMP}"
					    }
					]
				    }"""
			)
		    }
		}

		stage ('Download') {
		    steps {
			rtDownload (
			    serverId: SERVER_ID,
			    spec: """{
				    "files": [
					    {
						"pattern": "libs-snapshot-local/jfrog-examples/${BUILD_TIMESTAMP}/*(Pipeline).zip",
						"target": "Bazinga/{1}/"

					    }
					]
				    }"""
			)
		    }
		}

		stage ('Publish build info') {
		    steps {
			rtPublishBuildInfo (
			    serverId: SERVER_ID
			)
		    }
		}
	    }
	}


(gci <dir> -r | ? {$_.PSIsContainer -eq $True}) | ?{$_.GetFileSystemInfos().Count -eq 0} | select FullName | 
ForEach-Object{[void](New-Item -Path $_.FullName -Name "README.md" -ItemType File -Value "The first sentence in our file.")}
